## 카프카 기본 구조
• 카프카 내부에 데이터가 저장되는 파티션의 동작은 FIFO 방식의 큐 자료구조와 유사함
• 프로듀서 -> 토픽 -> 컨슈머
    • 프로듀서 : 큐에 데이터를 보내는 것
    • 토픽 : 구분하고자 하는 데이터의 구분에 따라서 토픽을 새로 만들고 운영
            토픽에서는 한개 이상의 파티션을 가지게 됨
            특정 메시지는 내부 로직에 따라서 여러 파티션중 하나에 데이터가 적재됨
            파티션 구조는 큐 구조와 유사
    • 컨슈머 : 큐에서 데이터를 가져가는 것 (처음부터 차례대로 가져감(FIFO))
              컨슈머가 파티션에서 데이터를 가져가더라도 데이터가 삭제되지 않음
              특정 컨슈머가 어떤 데이터 가져갔는지 커밋을 통해서 알 수 있음

• 카프카의 특징
    • 높은 처리량 : 프로듀서가 브로커로 데이터를 보낼 때와 컨슈머가 브로커로부터 데이터를 받을 때 모두 묶어서 전송
                  많은 양의 데이터를 묶음 단위로 처리하는 배치로 빠르게 처리할 수 있기 때문에 대용량의 실시간 로그 데이터를 처리하는데에 적합함
                  파티션 단위를 통해 동일 목적의 데이털르 여러 파티션에 분배하고 데이터를 병렬 처리할 수 있음
                  파티션 개수만큼 컨슈머 개수를 늘려서 동일 시간당 데이터 처리량을 늘리는 것
                  * 스케일 아웃 : 인스턴스 개수를 늘리는 것 (여기서는 컨슈머 개수)

    • 확장성     : 데이터가 적을 때는 카프카 클러스터의 브로커를 최소한의 개수로 운영하다가 데이터가 많아지면
                  클러스터의 브로커 개수를 자연스럽게 늘려 스케일 아웃할 수 있음
                  반대로 데이터 개수가 적어지고 추가 서버들이 더는 필요없어지면 브로커 개수를 줄여 스케일 인 함
                  카프카의 스케일 아웃, 스케일 인 과정은 클러스터의 무중단 운영을 지원하므로 24시간 데이터 처리하는
                  은행, 커머스같은 비즈니스 모델에서도 안정적인 운영이 가능함

    • 영속성     : 영속성이란 데이터를 생성한 프로그램이 종료되더라도 사라지지 않은 데이터의 특성을 뜻함
                  카프카는 다른 메시징 플랫폼과 다르게 전송받은 데이터를 메모리에 저장하지 않고 파일 시스템에 저장함
                  운영체제에서 파일 I/O성능 향상을 위해 페이지 캐시 영역을 메모리에 따로 생성하여 사용함
                  페이지 캐시 메모리 영역을 사용하여 한번 읽은 파일 내용은 메모리에 저장시켰다가 다시 사용하는 방식으로
                  카프카가 파일 시스템에 저장하고 데이터를 저장, 전송하더라도 처리량이 높음
                  디스크 기반의 파일 시스템을 활용하여 브로커 애플리케이션이 장애가 나더라도 프로세스를 재시작하여 안전하게 데이터 처리 가능

    • 고가용성   : 3개 이상의 서버들로 운영하여 일부 서버에 장애가 발생하더라도 무중단으로 안전하고 지속적으로 데이터 처리가능
                  클러스터로 이루어진 카프카는 데이터의 복제를 통해 고가용성의 특징을 가짐
                  프로듀서로 전송받은 데이터를 여러 브로커 중 1대의 브로커에만 저장하는 것이 아니라 또 다른 브로커에도 저장하는 것
                  한 브로커에 장애가 발생하더라도 복제된 데이터가 나머지 브로커에 저장되어 있으므로 저장된 데이터를 기준으로, 지속적으로 데이터 처리가 가능
                  서버를 직접 운영하는(on-premise) 환경의 서버 랙 또는 퍼블릭 클라우드의 리전 다위 장애에도 데이터를 안전하게 복제하는 브로커 옵션이 있음

## 카프카 브로커 • 클러스터 • 주키퍼

• 카프카 브로커는 카프카 클라이언트와 데이터를 주고받기 위해 사용하는 주체이자,
  데이터를 분산 저장하여 장애가 발생하더라도 하나하나가 프로세스로써 안전하게 사용할 수 있도록 도와주는 애플리케이션이다.
  하나의 서버에는 한 개의 카프카 브로커 프로세스가 실행된다. 하지만 데이터를 안전하게 보관하고 처리하기 위해서
  보통 3대 이상의 브로커 서버를 1개의 클러스터로 묶어서 운영한다. 카프카 클러스터로 묶인 브로커들은 프로듀서가 보낸
  데이터를 안전하게 분산 저장하고 복제하는 역할을 수행한다
  * 카프카 프로듀서 : 메시지를 생성해서 카프카의 토픽으로 메시지를 보내는 역할을 하는 애플리케이션, 서버 등
                   주요 기능으로서 각각의 메시지를 토픽 파티션에 매핑하고 파티션의 리더에 요청을 보내는 것

• 카프카 클러스터를 수행하기 위해서 주키퍼가 필요함
  주키퍼의 서로 다른 znode에 클러스터를 지정하면 됨
  root znode에 각 클러스터별 znode를 생성하고 클러스터 실행시 root가 아닌 하위 znode로 설ㅈ어
  카프카 3.0부터는 주키퍼가 없어도 클러스터 동작 가능

• 카파 아키텍쳐의 활용
    • 로그는 배치 데이터를 스트림으로 표현하기에 적합, 일반적으로 데이터 플랫폼에서 배치 데이터를 표현할 때는 각 시점(시점별, 일자별)의 전체 데이터를 백업한 스냅샷 데이터를 뜻함
      그러나 배치 데이터를 로그로 표현할 때는 각 시점의 배치 데이터의 표현 기록(change log)을 시간 순서대로 기록함으로써 각 시점의 모든 스냅샷 데이털르 저장하지 않고도 배치데이터 표현 가능
      * 변환 기록 로그에 timestamp가 기록되어야 됨

    • 배치 데이터 : 한정된(bounded) 데이터 처리
                  대규모 배치 데이터를 위한 분산 처리 수행
                  분, 시간, 일단위 처리를 위한 지연 발생
                  복잡한 키 조인 수행

    • 스트림 데이터 : 무한(unbounded) 데이터 처리
                    지속적으로 들어오는 데이터를 위한 분산 처리 수행
                    분 단위 이하 지연 발생
                    단순한 키 조인 수행

    • Materialized View로 기존에 하둡으로 사용하던 것을 처리해줌

    • 스트림 데이터를 배치 데이터로 사용하는 방법은 로그에 시간을 남기는 것, 로그에 남겨진 시간을 기준으로 데이터를 처리하면 스트림으로 적재된 데이터도 배치로 처리할 수 있게 됨
      카프카는 로그에 시간(timestamp)을 남기기 때문에 이런 방식의 처리가 가능

    • 스트리밍 데이터 레이크

• 브로커의 역할 : 컨트롤러,데이터 삭제
    • 컨트롤러
        • 클러스터의 다수 브로커 중 한 대가 컨트롤러의 역할을 한다. 컨트롤러는 다른 브로커들의 상태를 체크하고 브로커가
          클러스터로 빠지는 경우(이슈 발생시) 해당 브로커에 존재하는 리더 파티션을 재분배한다. 카프카는 지속적으로 데이터를 처리해야 하므로
          브로커의 상태가 비정상이라면 빠르게 클러스터에서 빼내는 것이 중요하다. 만약 컨트롤러 역할을 하는 브로커에 장애가 생기면
          다른 브로커가 컨트롤러 역할을 한다

    • 데이터 삭제
        • 카프카는 다른 메시징 플랫폼과 다르게 컨슈머가 데이터를 가져가더라도 토픽의 데이터는 삭제되지 않는다
          또한, 컨슈머나 프로듀서가 데이터 삭제를 요청할 수도 없고, 오직 브로커만이 데이터를 삭제할 수 있다
          데이터 삭제는 파일 단위로 이루어지는데 이 단위를 '로그 세그먼트(log segment)'라고 부른다
          이 세그먼트에는 다수의 데이터가 들어 있기 때문에 일반적인 데이터베이스처럼 특정 데이터를 선별해서 삭제할 수 없다
